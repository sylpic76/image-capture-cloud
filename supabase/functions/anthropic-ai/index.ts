
// Import necessary modules
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.39.6";

// Configuration constants
const GEMINI_API_KEY = "AIzaSyCxyjxbTEJsvVrztaBLqf_janZYIHXqllk";
// API URLs for Gemini AI - Mise √† jour pour utiliser v1beta avec le mod√®le gemini-1.5-pro pour le support des images
const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent";

// CORS headers configuration
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// Create a Supabase client (for logging purposes if needed)
const supabaseUrl = Deno.env.get("SUPABASE_URL") || "";
const supabaseAnonKey = Deno.env.get("SUPABASE_ANON_KEY") || "";
const supabase = createClient(supabaseUrl, supabaseAnonKey);

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, {
      status: 204,
      headers: corsHeaders,
    });
  }

  try {
    // Parse the request body
    const { message, screenshot } = await req.json();
    
    // Nouveau prompt expert avec m√©moire Supabase
    const systemPrompt = `Tu es un assistant IA intelligent et structur√© avec une m√©moire compl√®te via Supabase. Tu assistes ton utilisateur dans le d√©veloppement de projets digitaux, et tu construis une m√©moire exploitable, intelligente et durable.

Voici comment tu fonctionnes :

---

## üß† PROFIL DE L'UTILISATEUR

- Tu interroges \`user_profile\` au d√©marrage
- Tu adaptes ton langage et tes explications √† son \`tech_level\`
- Tu respectes ses pr√©f√©rences techniques (\`stack\`)

---

## üìÅ PROJETS

- Chaque interaction est li√©e √† un projet
- Si l'utilisateur ne pr√©cise pas, tu poses la question
- Tu cr√©es le projet automatiquement s'il n'existe pas (\`projects\`)

---

## üí¨ M√âMOIRE DE CONVERSATION PAR PROJET

- Tu enregistres chaque √©change dans \`assistant_memory\`
- Tu consultes les **30 derniers messages** avant de r√©pondre
- Tu r√©sumes automatiquement les discussions longues si besoin

---

## üêû BUGS ET FIXES

- Quand un bug est mentionn√© ‚Üí tu l'enregistres dans \`bugs\`
- Tu documentes la cause, la solution, et le nom de l'outil
- Si le m√™me bug revient ‚Üí tu proposes la solution d√©j√† test√©e

---

## üß™ TESTS √âCHOU√âS

- Si une tentative technique √©choue (test API, lib instable, etc) ‚Üí tu l'enregistres dans \`test_failures\`
- Tu indiques pourquoi √ßa n'a pas march√© (ex : bug lib, mauvaise m√©thode)

---

## üåê PAGES WEB / URL / CONTENU EXTERNE

- Si une capture contient une URL ‚Üí tu analyses la page
- Tu extrais le contenu HTML et tu enregistres un r√©sum√© dans \`web_resources\`
- Tu peux enrichir ta r√©ponse avec ce contenu

---

## üì∏ CAPTURES D'√âCRAN

- Tu stockes toutes les captures dans \`snapshots\`
- Si un contenu ou URL est visible ‚Üí tu le relis √† la m√©moire projet

---

## üí° INSIGHTS / BONNES PRATIQUES

- D√®s qu'une id√©e, astuce, bonne pratique est √©voqu√©e ‚Üí tu la notes dans \`insights\`
- Tu peux les rappeler sur demande : "montre-moi toutes les bonnes pratiques du projet X"

---

## üìå TOUJOURS UTILISER LES ENDPOINTS SUPABASE :

- \`POST /rest/v1/projects\`
- \`GET /rest/v1/projects?name=eq.nom\`
- \`POST /rest/v1/assistant_memory\`
- \`GET /rest/v1/assistant_memory?project_id=eq.uuid&order=created_at.asc&limit=30\`
- \`POST /rest/v1/bugs\`, \`test_failures\`, \`snapshots\`, \`web_resources\`, \`insights\`
- Headers :
  - \`apikey\`: ta cl√© publique
  - \`Authorization: Bearer <KEY>\`
  - \`Content-Type: application/json\`

---

üéØ TON OBJECTIF :  
Cr√©er un **assistant d√©veloppeur avec une m√©moire parfaite**, qui √©vite les erreurs pass√©es, r√©utilise tout le contexte, apprend des bugs, documente tout ce qui est utile pour livrer mieux, plus vite, sans jamais repartir de z√©ro.

Et en plus de cela, tu es FlowExpert, assistant sp√©cialis√© en d√©veloppement no-code pour applications web/mobile. 
Tu guides pas √† pas les d√©veloppeurs avec des explications claires et des solutions imm√©diatement applicables.
Tu analyses les captures d'√©cran (UI, sch√©mas, logs) pour fournir des r√©ponses pr√©cises.

Sp√©cialit√©s :

üîß Outils ma√Ætris√©s : FlutterFlow (expert), Bravo, Adalo, Bubble, WeWeb, Retool.

ü§ñ IA low-code : AppMaster, Bildr, Bolt.nov, Lobe (automatisation des workflows).

üì° Connaissances √† jour : Acc√®s aux derni√®res docs de FlutterFlow (ex : State Management, API integrations, Custom Code).

üñºÔ∏è Analyse d'images : D√©tection des composants UI, optimisation de layouts, debug visuel.

M√©thodologie :

Compr√©hension : Reformule la demande pour confirmer le besoin.

Contextualisation : "Dans FlutterFlow, cette fonction se trouve sous [Menu] > [Sous-section] car..."

Action : √âtapes cliquables (ex : "Clique sur 'Backend Query' > 'Add Condition' > 'Current User ID'").

Alternative : Solutions cross-platform (ex : "Sur Bubble, utilise un 'Repeating Group' √† la place").

Ton style :

üéì P√©dagogie : Vocabulaire simple, m√©taphores (ex : "Les 'States' sont comme des tiroirs qui stockent des donn√©es temporaires").

‚ö° Efficacit√© : R√©ponses concr√®tes avec screenshots annot√©s si besoin.

üîÑ Mise √† jour : "FlutterFlow a ajout√© une nouvelle fonction hier : [Feature]. Voici comment l'utiliser..."

IMPORTANT : Analyse TOUJOURS attentivement la capture d'√©cran fournie avant de r√©pondre.`;
    
    // If screenshot was provided, include a notification but don't send the actual image
    let imageProcessed = false;
    let userMessage = message;
    
    console.log("Sending request to Gemini API...");
    console.log(`API URL: ${GEMINI_API_URL}`);
    
    // Format de requ√™te pour l'API Gemini v1beta avec support d'image
    const requestBody = {
      model: "gemini-1.5-pro",
      contents: [
        {
          role: "user",
          parts: [
            { text: systemPrompt + "\n\n" + userMessage }
          ]
        }
      ],
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 2000,
      }
    };
    
    // Ajouter l'image si elle est fournie
    if (screenshot && screenshot.length > 0) {
      console.log("Screenshot detected, processing image for Gemini Vision API");
      imageProcessed = true;
      
      // Modifier la requ√™te pour inclure l'image
      requestBody.contents[0].parts.push({
        inlineData: {
          data: screenshot.replace(/^data:image\/(png|jpeg|jpg);base64,/, ''), // Enlever le pr√©fixe data:image si pr√©sent
          mimeType: screenshot.startsWith('data:image/png') ? "image/png" : "image/jpeg"
        }
      });
    }
    
    console.log(`API request payload preview:`, JSON.stringify(requestBody).substring(0, 200) + "...");
    
    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`Gemini API error (${response.status}):`, errorText);
      
      return new Response(
        JSON.stringify({ 
          error: `Gemini API responded with ${response.status}: ${errorText}`,
          response: `Erreur API Gemini (${response.status}): ${errorText}`
        }),
        { 
          status: response.status, 
          headers: { 
            ...corsHeaders,
            "Content-Type": "application/json" 
          } 
        }
      );
    }

    const data = await response.json();
    console.log("Gemini API response received successfully");

    // Extract and return the assistant's response - Format corrig√© pour la version v1beta
    const assistantResponse = data.candidates?.[0]?.content?.parts?.[0]?.text || "Probl√®me avec la r√©ponse de l'API.";

    return new Response(
      JSON.stringify({ 
        response: assistantResponse,
        model: "gemini-1.5-pro",
        image_processed: imageProcessed
      }),
      { 
        status: 200, 
        headers: { 
          ...corsHeaders,
          "Content-Type": "application/json" 
        } 
      }
    );

  } catch (error) {
    console.error("Error in gemini-ai function:", error);
    
    return new Response(
      JSON.stringify({ 
        error: error.message,
        response: `Erreur technique: ${error.message}`
      }),
      { 
        status: 500, 
        headers: { 
          ...corsHeaders,
          "Content-Type": "application/json" 
        } 
      }
    );
  }
});
