// Import necessary modules
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.39.6";

// Configuration constants
const GEMINI_API_KEY = "AIzaSyCxyjxbTEJsvVrztaBLqf_janZYIHXqllk";
// API URLs for Gemini AI - Mise √† jour pour utiliser v1beta avec le mod√®le gemini-1.5-pro pour le support des images
const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent";

// CORS headers configuration
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// Create a Supabase client
const supabaseUrl = Deno.env.get("SUPABASE_URL") || "";
const supabaseAnonKey = Deno.env.get("SUPABASE_ANON_KEY") || "";
const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Fonction pour g√©rer les projets (cr√©er ou r√©cup√©rer)
async function getOrCreateProject(projectName = "Default Project") {
  console.log("üß† Creating or fetching project:", projectName);
  try {
    // Check if project exists
    const { data: existingProject, error: fetchError } = await supabase
      .from('projects')
      .select('*')
      .eq('name', projectName)
      .single();
    
    if (fetchError && fetchError.code !== 'PGRST116') {
      console.error("Error fetching project:", fetchError);
      return null;
    }
    
    // If project exists, return it
    if (existingProject) {
      console.log(`‚úÖ Project found: ${existingProject.id} - ${existingProject.name}`);
      return existingProject;
    }
    
    // Otherwise, create new project
    const { data: newProject, error: insertError } = await supabase
      .from('projects')
      .insert([{ name: projectName, description: `Project created automatically on ${new Date().toISOString()}` }])
      .select('*')
      .single();
    
    if (insertError) {
      console.error("‚ùå Error creating project:", insertError);
      return null;
    }
    
    console.log(`‚úÖ New project created: ${newProject.id} - ${newProject.name}`);
    return newProject;
  } catch (error) {
    console.error("‚ùå Error in getOrCreateProject:", error);
    return null;
  }
}

// Fonction pour r√©cup√©rer le profil utilisateur (ou en cr√©er un par d√©faut)
async function getUserProfile() {
  try {
    const { data: profiles, error: fetchError } = await supabase
      .from('user_profile')
      .select('*')
      .limit(1);
    
    if (fetchError) {
      console.error("Error fetching user profile:", fetchError);
      return null;
    }
    
    if (profiles && profiles.length > 0) {
      return profiles[0];
    }
    
    // Create default profile if none exists
    const { data: newProfile, error: insertError } = await supabase
      .from('user_profile')
      .insert([{
        name: "Default User",
        tech_level: "interm√©diaire",
        stack: ["React", "Typescript", "Supabase"]
      }])
      .select('*')
      .single();
    
    if (insertError) {
      console.error("Error creating user profile:", insertError);
      return null;
    }
    
    return newProfile;
  } catch (error) {
    console.error("Error in getUserProfile:", error);
    return null;
  }
}

// Fonction pour sauvegarder un message dans la m√©moire du projet
async function saveToMemory(projectId, role, content) {
  try {
    const { error } = await supabase
      .from('assistant_memory')
      .insert([{
        project_id: projectId,
        role: role,
        content: content
      }]);
    
    if (error) {
      console.error("Error saving to memory:", error);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error("Error in saveToMemory:", error);
    return false;
  }
}

// Fonction pour r√©cup√©rer les derniers messages de la m√©moire
async function getMemoryContext(projectId, limit = 30) {
  try {
    const { data, error } = await supabase
      .from('assistant_memory')
      .select('*')
      .eq('project_id', projectId)
      .order('created_at', { ascending: false })
      .limit(limit);
    
    if (error) {
      console.error("Error fetching memory:", error);
      return [];
    }
    
    return data.reverse(); // Return in chronological order
  } catch (error) {
    console.error("Error in getMemoryContext:", error);
    return [];
  }
}

// Fonction pour sauvegarder une capture d'√©cran dans les snapshots
async function saveScreenshot(projectId, imageUrl) {
  try {
    const { error } = await supabase
      .from('snapshots')
      .insert([{
        project_id: projectId,
        image_url: imageUrl
      }]);
    
    if (error) {
      console.error("Error saving screenshot:", error);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error("Error in saveScreenshot:", error);
    return false;
  }
}

// NOUVELLES FONCTIONS POUR LA M√âMOIRE AUGMENT√âE

// D√©tecte et enregistre les bugs
async function logBug(projectId, message, toolName = null) {
  console.log(`üêõ Logging bug for project ${projectId}`);
  try {
    // Extraire les informations du bug
    let title = "Error Detected";
    let description = message;
    let cause = null;
    let fix = null;
    let tool = toolName;

    // D√©tection du type d'outil depuis le message
    if (!tool) {
      const toolPatterns = {
        'FlutterFlow': /flutterflow|flutter\s*flow/i,
        'Lovable': /lovable/i,
        'Supabase': /supabase|database/i,
        'Make': /make\.com|integromat/i,
        'React': /react|jsx|tsx/i,
        'API': /api|fetch|axios|http|request/i,
        'Firebase': /firebase|firestore/i,
      };

      for (const [toolName, pattern] of Object.entries(toolPatterns)) {
        if (pattern.test(message)) {
          tool = toolName;
          break;
        }
      }
    }

    // D√©tection du titre du bug
    if (message.includes("failed to fetch")) {
      title = "Network Request Failed";
      cause = "Network connectivity issue or API endpoint problem";
    } else if (message.includes("TypeError")) {
      title = "Type Error";
      cause = "Incorrect data type or undefined value used";
    } else if (message.includes("Error 500") || message.includes("500")) {
      title = "Server Error (500)";
      cause = "Internal server error";
    } else if (message.includes("400") || message.includes("Bad Request")) {
      title = "Bad Request (400)";
      cause = "Invalid request parameters or format";
    } else if (message.includes("401") || message.includes("Unauthorized")) {
      title = "Authentication Error (401)";
      cause = "Missing or invalid authentication credentials";
    } else if (message.includes("404") || message.includes("Not Found")) {
      title = "Not Found (404)";
      cause = "Requested resource does not exist";
    }

    // Enregistrement dans la base de donn√©es
    const { data, error } = await supabase
      .from('bugs')
      .insert([{
        project_id: projectId,
        title: title,
        description: description,
        cause: cause,
        fix: fix,
        tool: tool,
        severity: "medium" // Valeur par d√©faut
      }])
      .select('*')
      .single();

    if (error) {
      console.error("‚ùå Error saving bug:", error);
      return null;
    }

    console.log(`‚úÖ Bug logged successfully: ${title}`);
    return data;
  } catch (error) {
    console.error("‚ùå Error in logBug:", error);
    return null;
  }
}

// Enregistre les √©checs de tests
async function logTestFailure(projectId, message) {
  console.log(`üß™ Logging test failure for project ${projectId}`);
  try {
    // Analyse simple du message pour d√©terminer l'√©tape et la raison
    let description = message;
    let reason = "Unknown";

    // D√©tection de patterns communs dans les messages d'√©chec de test
    if (message.includes("expected") && message.includes("but got")) {
      reason = "Unexpected result";
    } else if (message.includes("timeout")) {
      reason = "Operation timed out";
    } else if (message.includes("syntax") || message.includes("invalid")) {
      reason = "Syntax or validation error";
    }

    const { data, error } = await supabase
      .from('test_failures')
      .insert([{
        project_id: projectId,
        description: description,
        why_it_failed: reason
      }])
      .select('*')
      .single();

    if (error) {
      console.error("‚ùå Error saving test failure:", error);
      return null;
    }

    console.log(`‚úÖ Test failure logged successfully`);
    return data;
  } catch (error) {
    console.error("‚ùå Error in logTestFailure:", error);
    return null;
  }
}

// D√©tecte et traite les URLs dans les messages
async function processWebResources(projectId, message) {
  console.log(`üåê Processing web resources for project ${projectId}`);
  try {
    // Regex pour identifier les URLs dans le texte
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    const urls = message.match(urlRegex);

    if (!urls || urls.length === 0) {
      return null;
    }

    // Traiter les 3 premi√®res URLs maximum pour √©viter surcharge
    const processedUrls = [];
    for (let i = 0; i < Math.min(urls.length, 3); i++) {
      const url = urls[i];
      try {
        console.log(`üîç Fetching content from URL: ${url}`);
        
        // Tenter de r√©cup√©rer le contenu de la page
        const response = await fetch(url, {
          headers: {
            'User-Agent': 'Mozilla/5.0 (compatible; AssistantBot/1.0)'
          }
        });
        
        if (!response.ok) {
          console.warn(`‚ö†Ô∏è Failed to fetch URL ${url}: ${response.status}`);
          continue;
        }
        
        const html = await response.text();
        
        // Extraction basique du titre
        let title = "";
        const titleMatch = html.match(/<title>(.*?)<\/title>/i);
        if (titleMatch && titleMatch[1]) {
          title = titleMatch[1].trim();
        }
        
        // Extraction basique de la meta description
        let description = "";
        const descMatch = html.match(/<meta\s+name="description"\s+content="(.*?)".*?>/i);
        if (descMatch && descMatch[1]) {
          description = descMatch[1].trim();
        }
        
        // Sauvegarder dans la base de donn√©es
        const { data, error } = await supabase
          .from('web_resources')
          .insert([{
            project_id: projectId,
            url: url,
            title: title,
            extracted_text: description || "No description available"
          }])
          .select('*')
          .single();
        
        if (error) {
          console.error(`‚ùå Error saving web resource for ${url}:`, error);
          continue;
        }
        
        processedUrls.push(data);
        console.log(`‚úÖ Saved web resource: ${title || url}`);
        
      } catch (urlError) {
        console.error(`‚ùå Error processing URL ${url}:`, urlError);
        continue;
      }
    }
    
    return processedUrls;
  } catch (error) {
    console.error("‚ùå Error in processWebResources:", error);
    return null;
  }
}

// D√©tecte et sauvegarde les bonnes pratiques et insights
async function detectAndSaveInsights(projectId, content) {
  console.log(`üí° Detecting insights for project ${projectId}`);
  try {
    // Mots-cl√©s qui indiquent souvent des bonnes pratiques
    const insightKeywords = [
      'best practice', 'bonne pratique', 'tip:', 'astuce:',
      'remember to', 'n\'oubliez pas de', 'important:', 
      'recommendation', 'recommandation', 'conseil',
      'vous devriez', 'you should', 'never', 'always', 'toujours', 'jamais'
    ];
    
    // V√©rifier si le contenu contient des mots-cl√©s d'insights
    let containsInsightKeyword = false;
    let insightType = "General";
    
    for (const keyword of insightKeywords) {
      if (content.toLowerCase().includes(keyword.toLowerCase())) {
        containsInsightKeyword = true;
        
        // D√©terminer le type d'insight
        if (content.toLowerCase().includes('security') || content.toLowerCase().includes('s√©curit√©')) {
          insightType = "Security";
        } else if (content.toLowerCase().includes('performance')) {
          insightType = "Performance";
        } else if (content.toLowerCase().includes('ui') || content.toLowerCase().includes('ux') || 
                  content.toLowerCase().includes('interface') || content.toLowerCase().includes('design')) {
          insightType = "UI/UX";
        } else if (content.toLowerCase().includes('code') || content.toLowerCase().includes('d√©veloppement') ||
                  content.toLowerCase().includes('programming')) {
          insightType = "Development";
        }
        
        break;
      }
    }
    
    if (!containsInsightKeyword) {
      return null;
    }
    
    // Extraire le paragraphe qui contient l'insight
    let insightContent = content;
    if (content.length > 300) {
      // Trouver un paragraphe de taille raisonnable qui contient un mot-cl√©
      const paragraphs = content.split(/\n\n+/);
      for (const paragraph of paragraphs) {
        for (const keyword of insightKeywords) {
          if (paragraph.toLowerCase().includes(keyword.toLowerCase()) && paragraph.length < 500) {
            insightContent = paragraph;
            break;
          }
        }
      }
    }
    
    // Sauvegarder l'insight
    const { data, error } = await supabase
      .from('insights')
      .insert([{
        project_id: projectId,
        type: insightType,
        summary: insightContent.substring(0, 1000) // Limiter la taille
      }])
      .select('*')
      .single();
    
    if (error) {
      console.error("‚ùå Error saving insight:", error);
      return null;
    }
    
    console.log(`‚úÖ Insight saved: ${insightType}`);
    return data;
  } catch (error) {
    console.error("‚ùå Error in detectAndSaveInsights:", error);
    return null;
  }
}

// Analyseur de contenu adaptatif pour la d√©tection de bugs, tests √©chou√©s, etc.
async function analyzeContent(projectId, content, role) {
  // N'analyser que les messages utilisateur, pas les r√©ponses de l'assistant
  if (role !== 'user') return;
  
  // D√©tection de patterns pour les diff√©rentes cat√©gories
  const lowerContent = content.toLowerCase();
  
  // 1. D√©tection de bugs
  const bugPatterns = [
    'error', 'erreur', 'failed', '√©chou√©', 'bug', 'crash', 'exception',
    '404', '500', '403', 'unauthoriz', 'timeout', 'd√©lai d√©pass√©'
  ];
  
  // 2. D√©tection de tests √©chou√©s
  const testFailurePatterns = [
    'test failed', 'test √©chou√©', 'doesn\'t work', 'ne fonctionne pas',
    'j\'ai essay√©', 'i tried', 'attempt failed', 'tentative √©chou√©e'
  ];
  
  // Appliquer les d√©tections
  let hasBugPattern = false;
  let hasTestFailurePattern = false;
  
  for (const pattern of bugPatterns) {
    if (lowerContent.includes(pattern)) {
      hasBugPattern = true;
      break;
    }
  }
  
  for (const pattern of testFailurePatterns) {
    if (lowerContent.includes(pattern)) {
      hasTestFailurePattern = true;
      break;
    }
  }
  
  // Traiter selon les patterns d√©tect√©s
  const tasks = [];
  
  if (hasBugPattern) {
    tasks.push(logBug(projectId, content));
  }
  
  if (hasTestFailurePattern) {
    tasks.push(logTestFailure(projectId, content));
  }
  
  // Toujours chercher des URLs et des insights
  tasks.push(processWebResources(projectId, content));
  tasks.push(detectAndSaveInsights(projectId, content));
  
  // Ex√©cuter tout en parall√®le
  await Promise.all(tasks);
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, {
      status: 204,
      headers: corsHeaders,
    });
  }

  try {
    // Parse the request body and log received parameters
    const requestBody = await req.json();
    console.log("üì• Received request body:", JSON.stringify({
      message: requestBody.message ? "Message present (length: " + requestBody.message.length + ")" : "No message",
      screenshot: requestBody.screenshot ? "Screenshot present" : "No screenshot",
      projectName: requestBody.projectName || "Not provided",
    }));
    
    const { message, screenshot, projectName } = requestBody;
    
    // Log project information
    console.log("üè¢ Project name received:", projectName || "Default Project");
    
    // Get or create the project
    const project = await getOrCreateProject(projectName || "Default Project");
    if (!project) {
      throw new Error("Failed to get or create project");
    }
    
    console.log(`üîç Using project: ${project.id} - ${project.name}`);
    
    // Get user profile
    const userProfile = await getUserProfile();
    
    // Get memory context
    const memoryContext = await getMemoryContext(project.id);
    
    // Format memory context for the prompt
    let memoryContextText = "";
    if (memoryContext.length > 0) {
      memoryContextText = "\n\n## üìú CONTEXTE DE LA CONVERSATION\n\n";
      memoryContext.forEach(entry => {
        memoryContextText += `${entry.role === 'user' ? 'üë§' : 'ü§ñ'} ${entry.content.substring(0, 200)}${entry.content.length > 200 ? '...' : ''}\n\n`;
      });
    }
    
    // Analyse du contenu utilisateur et enrichissement de la m√©moire
    await analyzeContent(project.id, message, 'user');
    
    // Save user message to memory
    await saveToMemory(project.id, 'user', message);
    
    // Process screenshot if provided
    let imageProcessed = false;
    let userMessage = message;
    
    if (screenshot && screenshot.length > 0) {
      console.log("Screenshot detected, processing image for Gemini Vision API");
      imageProcessed = true;
      
      // Save screenshot to snapshots
      await saveScreenshot(project.id, "data:image/jpeg;base64," + screenshot);
    }
    
    // Nouveau prompt expert avec m√©moire Supabase
    const systemPrompt = `Tu es un assistant IA intelligent et structur√© avec une m√©moire compl√®te via Supabase. Tu assistes ton utilisateur dans le d√©veloppement de projets digitaux, et tu construis une m√©moire exploitable, intelligente et durable.

Voici comment tu fonctionnes :

---

## üß† PROFIL DE L'UTILISATEUR

- Tu interroges \`user_profile\` au d√©marrage
- Tu adaptes ton langage et tes explications √† son \`tech_level\`
- Tu respectes ses pr√©f√©rences techniques (\`stack\`)

---

## üìÅ PROJETS

- Chaque interaction est li√©e √† un projet
- Si l'utilisateur ne pr√©cise pas, tu poses la question
- Tu cr√©es le projet automatiquement s'il n'existe pas (\`projects\`)

---

## üí¨ M√âMOIRE DE CONVERSATION PAR PROJET

- Tu enregistres chaque √©change dans \`assistant_memory\`
- Tu consultes les **30 derniers messages** avant de r√©pondre
- Tu r√©sumes automatiquement les discussions longues si besoin

---

## üêû BUGS ET FIXES

- Quand un bug est mentionn√© ‚Üí tu l'enregistres dans \`bugs\`
- Tu documentes la cause, la solution, et le nom de l'outil
- Si le m√™me bug revient ‚Üí tu proposes la solution d√©j√† test√©e

---

## üß™ TESTS √âCHOU√âS

- Si une tentative technique √©choue (test API, lib instable, etc) ‚Üí tu l'enregistres dans \`test_failures\`
- Tu indiques pourquoi √ßa n'a pas march√© (ex : bug lib, mauvaise m√©thode)

---

## üåê PAGES WEB / URL / CONTENU EXTERNE

- Si une capture contient une URL ‚Üí tu analyses la page
- Tu extrais le contenu HTML et tu enregistres un r√©sum√© dans \`web_resources\`
- Tu peux enrichir ta r√©ponse avec ce contenu

---

## üì∏ CAPTURES D'√âCRAN

- Tu stockes toutes les captures dans \`snapshots\`
- Si un contenu ou URL est visible ‚Üí tu le relis √† la m√©moire projet

---

## üí° INSIGHTS / BONNES PRATIQUES

- D√®s qu'une id√©e, astuce, bonne pratique est √©voqu√©e ‚Üí tu la notes dans \`insights\`
- Tu peux les rappeler sur demande : "montre-moi toutes les bonnes pratiques du projet X"

---

## üìå TOUJOURS UTILISER LES ENDPOINTS SUPABASE :

- \`POST /rest/v1/projects\`
- \`GET /rest/v1/projects?name=eq.nom\`
- \`POST /rest/v1/assistant_memory\`
- \`GET /rest/v1/assistant_memory?project_id=eq.uuid&order=created_at.asc&limit=30\`
- \`POST /rest/v1/bugs\`, \`test_failures\`, \`snapshots\`, \`web_resources\`, \`insights\`
- Headers :
  - \`apikey\`: ta cl√© publique
  - \`Authorization: Bearer <KEY>\`
  - \`Content-Type: application/json\`

---

üéØ TON OBJECTIF :  
Cr√©er un **assistant d√©veloppeur avec une m√©moire parfaite**, qui √©vite les erreurs pass√©es, r√©utilise tout le contexte, apprend des bugs, documente tout ce qui est utile pour livrer mieux, plus vite, sans jamais repartir de z√©ro.

Et en plus de cela, tu es FlowExpert, assistant sp√©cialis√© en d√©veloppement no-code pour applications web/mobile. 
Tu guides pas √† pas les d√©veloppeurs avec des explications claires et des solutions imm√©diatement applicables.
Tu analyses les captures d'√©cran (UI, sch√©mas, logs) pour fournir des r√©ponses pr√©cises.

Sp√©cialit√©s :

üîß Outils ma√Ætris√©s : FlutterFlow (expert), Bravo, Adalo, Bubble, WeWeb, Retool.

ü§ñ IA low-code : AppMaster, Bildr, Bolt.nov, Lobe (automatisation des workflows).

üì° Connaissances √† jour : Acc√®s aux derni√®res docs de FlutterFlow (ex : State Management, API integrations, Custom Code).

üñºÔ∏è Analyse d'images : D√©tection des composants UI, optimisation de layouts, debug visuel.

M√©thodologie :

Compr√©hension : Reformule la demande pour confirmer le besoin.

Contextualisation : "Dans FlutterFlow, cette fonction se trouve sous [Menu] > [Sous-section] car..."

Action : √âtapes cliquables (ex : "Clique sur 'Backend Query' > 'Add Condition' > 'Current User ID'").

Alternative : Solutions cross-platform (ex : "Sur Bubble, utilise un 'Repeating Group' √† la place").

Ton style :

üéì P√©dagogie : Vocabulaire simple, m√©taphores (ex : "Les 'States' sont comme des tiroirs qui stockent des donn√©es temporaires").

‚ö° Efficacit√© : R√©ponses concr√®tes avec screenshots annot√©s si besoin.

üîÑ Mise √† jour : "FlutterFlow a ajout√© une nouvelle fonction hier : [Feature]. Voici comment l'utiliser..."

IMPORTANT : Analyse TOUJOURS attentivement la capture d'√©cran fournie avant de r√©pondre.

${userProfile ? `\n## üë§ PROFIL UTILISATEUR\nNom: ${userProfile.name}\nNiveau technique: ${userProfile.tech_level || 'Non sp√©cifi√©'}\nStack: ${userProfile.stack ? userProfile.stack.join(', ') : 'Non sp√©cifi√©e'}\n` : ''}

${project ? `\n## üóÇÔ∏è PROJET ACTUEL\nNom: ${project.name}\nID: ${project.id}\n` : ''}

${memoryContextText}`;
    
    console.log("Sending request to Gemini API...");
    console.log(`API URL: ${GEMINI_API_URL}`);
    
    // Format de requ√™te pour l'API Gemini v1beta avec support d'image
    const geminiRequestPayload = {
      model: "gemini-1.5-pro",
      contents: [
        {
          role: "user",
          parts: [
            { text: systemPrompt + "\n\n" + userMessage }
          ]
        }
      ],
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 2000,
      }
    };
    
    // Ajouter l'image si elle est fournie
    if (screenshot && screenshot.length > 0) {
      // Modifier la requ√™te pour inclure l'image
      geminiRequestPayload.contents[0].parts.push({
        inlineData: {
          data: screenshot.replace(/^data:image\/(png|jpeg|jpg);base64,/, ''), // Enlever le pr√©fixe data:image si pr√©sent
          mimeType: screenshot.startsWith('data:image/png') ? "image/png" : "image/jpeg"
        }
      });
    }
    
    console.log(`API request payload preview:`, JSON.stringify(geminiRequestPayload).substring(0, 200) + "...");
    
    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(geminiRequestPayload),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`Gemini API error (${response.status}):`, errorText);
      
      // Log the error as a bug
      await logBug(project.id, `Gemini API error (${response.status}): ${errorText}`, "Gemini API");
      
      return new Response(
        JSON.stringify({ 
          error: `Gemini API responded with ${response.status}: ${errorText}`,
          response: `Erreur API Gemini (${response.status}): ${errorText}`
        }),
        { 
          status: response.status, 
          headers: { 
            ...corsHeaders,
            "Content-Type": "application/json" 
          } 
        }
      );
    }

    const data = await response.json();
    console.log("Gemini API response received successfully");

    // Extract and return the assistant's response - Format corrig√© pour la version v1beta
    const assistantResponse = data.candidates?.[0]?.content?.parts?.[0]?.text || "Probl√®me avec la r√©ponse de l'API.";

    // Save assistant response to memory
    await saveToMemory(project.id, 'assistant', assistantResponse);
    
    // Analyser la r√©ponse de l'assistant pour des insights
    await detectAndSaveInsights(project.id, assistantResponse);

    return new Response(
      JSON.stringify({ 
        response: assistantResponse,
        model: "gemini-1.5-pro",
        image_processed: imageProcessed
      }),
      { 
        status: 200, 
        headers: { 
          ...corsHeaders,
          "Content-Type": "application/json" 
        } 
      }
    );

  } catch (error) {
    console.error("‚ùå Error in anthropic-ai function:", error);
    
    return new Response(
      JSON.stringify({ 
        error: error.message,
        response: `Erreur technique: ${error.message}`
      }),
      { 
        status: 500, 
        headers: { 
          ...corsHeaders,
          "Content-Type": "application/json" 
        } 
      }
    );
  }
});
